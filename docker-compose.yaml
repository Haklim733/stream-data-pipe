services:
  # mosquitto:
  #   image: eclipse-mosquitto:latest
  #   container_name: mosquitto
  #   ports:
  #     - "1883:1883"
  #     - 8883:8883
  #   volumes:
  #     - ./packages/mosquitto/config:/mosquitto/config
  #     - ./packages/mosquitto/data:/mosquitto/data
  #     - ./packages/mosquitto/log:/mosquitto/log
  # mqtt-pub:
  #   container_name: mqtt-pub
  #   build:
  #     context: packages/mosquitto
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - mosquitto
  #   volumes:
  #     - ./packages/mosquitto/src:/app/src
  spark-iceberg:
    container_name: spark-iceberg
    build:
      context: packages/spark
      dockerfile: Dockerfile
    networks:
      iceberg_net:
    depends_on:
      - polaris
      - minio
    volumes:
      - ./packages/spark/warehouse:/home/iceberg/warehouse
      - ./packages/spark/notebooks:/home/iceberg/notebooks/notebooks
      - ./packages/spark/data:/home/iceberg/data
      - ./packages/spark/tmp:/tmp/spark-events # needed using spark image and docker file
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - POLARIS_HOST=polaris
      - JUPYTER_PASSWORD=password
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  polaris:
    image: apache/polaris:latest
    container_name: polaris
    networks:
      iceberg_net:
    ports:
      - "8181:8181"
      - "8182"
    environment:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      POLARIS_BOOTSTRAP_CREDENTIALS: POLARIS,root,secret
      POLARIS.REALM-CONTEXT.REALMS: default-realm
      quarkus.log.file.enable: "false"
      quarkus.otel.sdk.disabled: "true"
      POLARIS.REALM-CONTEXT.HEADER-NAME: default-realm
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./packages/polaris/credentials:/tmp/credentials/
  # rest:
  #   image: apache/iceberg-rest-fixture
  #   container_name: iceberg-rest
  #   networks:
  #     iceberg_net:
  #   ports:
  #     - 8181:8181
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #     - CATALOG_WAREHOUSE=s3://warehouse/
  #     - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
  #     - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: |
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
  # kafka-broker:
  #   image: apache/kafka-native:latest
  #   container_name: kafka-broker
  #   ports:
  #     - "9092:9092"
  #   networks:
  #     iceberg_net:
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #     - KAFKA_NODE_ID=1
  #     - KAFKA_PROCESS_ROLES=broker,controller
  #     - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
  #     - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
  #     - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
  #     - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
  #     - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
  #     - KAFKA_NUM_PARTITIONS=1
  #     - KAFKA_AUTO_CREATE_TOPICS_ENABLE="true"  # Kafka will automatically create topics if needed.
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1  # Since weâ€™re running one broker, one replica is enough.
  #     - KAFKA_LOG_RETENTION_HOURS=168  # Keep logs for 7 days.
  #     - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0  # No delay for consumer rebalancing.
  #     - CLUSTER_ID="Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
  #   volumes:
  #   - /var/run/docker.sock:/var/run/docker.sock
  #   - ./data:/var/lib/kafka/data  # Store Kafka logs on your local machine.
  # flink-jobmanager:
  #   image: flink:latest
  #   ports:
  #     - "8081:8081"
  #   command: jobmanager
  #   networks:
  #     iceberg_net:
  #   environment:
  #     - |
  #       FLINK_PROPERTIES=
  #       jobmanager.rpc.address: flink-jobmanager
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  # flink-taskmanager:
  #   image: flink:latest
  #   depends_on:
  #     - flink-jobmanager
  #   command: taskmanager
  #   networks:
  #     iceberg_net:
  #   scale: 1
  #   environment:
  #     - |
  #       FLINK_PROPERTIES=
  #       jobmanager.rpc.address: flink-jobmanager
  #       taskmanager.numberOfTaskSlots: 2
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  # svelte-webapp:
  #     build: ./svelte-webapp
  #     ports:
  #       - "5173:5173"
  #     depends_on:
  #       - iceberg-rest
  #       - minio
  #     environment:
  #       - ICEBERG_REST_URL=http://iceberg-rest:8181
  #       - MINIO_URL=http://minio:9000
networks:
  iceberg_net: